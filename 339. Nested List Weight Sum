# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def __init__(self, value=None):
#        """
#        If value is not specified, initializes an empty list.
#        Otherwise initializes a single integer equal to value.
#        """
#
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def add(self, elem):
#        """
#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
#        :rtype void
#        """
#
#    def setInteger(self, value):
#        """
#        Set this NestedInteger to hold a single integer equal to value.
#        :rtype void
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """
# https://leetcode.com/problems/nested-list-weight-sum/discuss/80042/Python-DFS-and-BFS-Solution
class Solution:
    result = 0
    def depthSum(self, nestedList: List[NestedInteger]) -> int:
        depth = 1
        
        self.depth_util(nestedList,depth )
        return self.result
                    
    def depth_util( self, nestedList: List[NestedInteger], depth):
        
        for ele in nestedList:
            if ele.isInteger():
                self.result = self.result + ( depth * ele.getInteger())
            else:
                self.depth_util(  ele.getList(), depth+1)
                
        
        
        
        
        
        
        
        
