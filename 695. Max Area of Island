class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        
        #string, column length, return Islands
        
        if(not grid):
            return 0
        
        iNumOfIslands = 0
        iRows = len(grid)
        hash_set = set()
        max_area = 0
        
        for i  in range(0,iRows,1) :
            for j in range(0,len(grid[i]),1):
                if(grid[i][j] == 1):
                    # iNumOfIslands  += 1
                    area = self.exploreDFS(grid,i,j,1)
                    max_area  =   max(area,max_area)
                    # hash_set.add(pattern)
        return max_area
                
    def exploreDFS(self, grid: List[List[str]], i, j,count) -> None:
                
        if(i < 0 or i >= len(grid)):
            return 0
        
        if( j < 0 or j >= len(grid[i])):
            return 0
        
        if( grid[i][j] == 0):
            return 0
        
        grid[i][j] = 0
        
        
        
        uret  = self.exploreDFS(grid,i-1,j,count) #up

        dret  = self.exploreDFS(grid,i+1,j, count) #down

        lret = self.exploreDFS(grid,i,j-1,count) #left

        rret =  self.exploreDFS(grid,i,j+1,count) #right
        

        
        return count+uret+dret+lret+rret
        
        
        

