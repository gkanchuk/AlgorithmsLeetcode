Largest Smaller BST Key
Given a root of a Binary Search Tree (BST) and a number num, implement an efficient function findLargestSmallerKey that finds the largest key in the tree that is smaller than num. If such a number doesn’t exist, return -1. Assume that all keys in the tree are nonnegative.

Analyze the time and space complexities of your solution.

For example:
  
          -20
        /    \
       -9     -25
     /  \
    5    -1
        /   \
      11    14
    
 
For num = 17 and the binary search tree below:



Your function would return:

14 since it’s the largest key in the tree that is still smaller than 17.

Constraints:

[time limit] 5000ms
[input] Node rootNode
[output] integer

tempList =  [9,]


def find_largest_smaller_key(self, num, root):
  
  int maxVal = -1
  
  if(not root):
      return 
    
    
  while(root):
     
    if num <= root.val:
       root =  root.left
    elif num >  root.val:
       maxVal =  root.val
       root =  root.right     
      
 return maxVal
  
 
    pass 
