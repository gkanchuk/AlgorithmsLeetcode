# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        
        if not l1:
            return l2
        
        if not l2:
            return l1
        
        if(l1.val < l2.val):
                third =  last = l1               
                l1 = l1.next
        else:
                third =  last = l2
                l2 = l2.next
        head = third
        last.next = None

            
        while l1 and l2:
             
            if(l1.val < l2.val):
                last.next = l1
                last = l1
                
                l1 = l1.next
            else:
                last.next  = l2
                last  = l2
                l2 = l2.next
            last.next  = None
        if(l1):
            last.next = l1
        else:
            last.next  = l2
           
        return head         
            
                
                
#             if l2.val == l1.val:
#                 q = l2
#                 l2 = l2.next
#                 if k:
#                     k.next = q     [3,8,9] [5,6,7]
#                 else:
#                     head = q
#                 q.next  = l1
#                 k = l1
#                 l1 = l1.next

#             elif l1.val < l2.val:
#                 k  =l1
#                 l1 =  l1.next
                
#             elif  l2.val < l1.val:
#                 q  = l2
#                 l2 = l2.next
#                 if  k:
#                     k.next = q
                    
#                 else:
#                     head = q
                
#                 k = q
#                 q.next = l1
                
                      
                
#         while(l2):
#             if(k):
#                 k.next =  l2
#                 break;
            
            
                  
            
            
      
            
            
            
                

            
            
        
                

            







