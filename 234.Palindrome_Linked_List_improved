# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        
        if head == None:
            return True
        
        
        slow = head
        fast = head
        # current = head
        # length = 1
        
        # while current.next != None:      
        #     length += 1
        #     current  = current.next
            
        
        while fast and fast.next:
            slow  =  slow.next
            fast =  fast.next.next
            
        
        # revHead = self.reverseLinkedList(slow)
        
            
#         if length%2 ==  0:
#             revHead = self.reverseLinkedList(slow)
#         else:
#             revHead = self.reverseLinkedList(slow.next)

         
        # range = int(length/2)
        # i =1
        
        if fast is not None:
             revHead = self.reverseLinkedList(slow.next)
        else:
            revHead = self.reverseLinkedList(slow)
            
            
            
        
#         while  head and revHead:
#             if( head.val != revHead.val):
#                 return False
#             i+=1
#             head = head.next
#             revHead =  revHead.next
        while  revHead:
            if( head.val != revHead.val):
                return False
            # i+=1
            head = head.next
            revHead =  revHead.next
        
        
        return True
        
                 
    def  reverseLinkedList(self, head :  ListNode)  -> ListNode:
        if not head:
            return  None
        
        if not head.next:
            return  head
        
        s  = None
        while head:
            r =  head
            head =  head.next
            r.next = s
            s = r
                   
        return r
        
        
        
        
            
        
               
        
        
        
        
       
                
            
        
            
        
        
        
        
        
