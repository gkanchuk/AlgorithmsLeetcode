class Solution:
    def minKnightMoves(self, s: int, e: int) -> int:
        directions =  [ [-1,-2],[-2,-1],[-2,1],[-1,2],[1,-2],[2,-1],[1,2],[2,1]]
        
        queue = deque()
        visited =  set()
        
        queue.append([0,0])
        visited.add( (0,0) )
        count = 0
        
        while queue:
            i = 0 
            n = len(queue)
            
            while i  < n:
                x,y =  queue.popleft()
                if  x == s and y == e:
                    return count

                # directions  = [(x-1,y-2),(x-2,y-1),(x-2,y+1),(x-1,y+2),(x+1,y-2),(x+2,y-1),(x+1,y+2),(x+2,y+1)]
                for d in directions:
                    new_x,  new_y = x+d[0],y+d[1]
                    if (new_x,new_y) not in visited:
                        queue.append([new_x,new_y])
                        visited.add((new_x,new_y))
                i =  i+1
            count =  count + 1
           
                
        return -1
