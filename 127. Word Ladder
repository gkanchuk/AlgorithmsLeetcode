class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        alphabets = string.ascii_lowercase
        # alphabets = "abcdefghijklmnopqrstuvwxyz"

        wordList = set(wordList)
        if not endWord  or  not beginWord or not endWord in wordList:
            return 0
    
        queue  = deque()
        depth = 0
        num_ele_depth = 0
        queue.append(beginWord)
        
        while  queue:
            depth = depth + 1
            num_ele_depth  = len(queue)
            j = 0
            
            while  j < num_ele_depth:
                curr_word  = queue.popleft()
                i  = 0    
                while  i < len(curr_word):
                    for  k in alphabets:
                        temp = curr_word[:i]+ k + curr_word[i+1:]
                        if temp == curr_word:
                            continue
                        if  temp == endWord:
                            return depth + 1
                        if temp  in  wordList:
                            queue.append(temp)
                            wordList.remove(temp)
                    i  = i + 1
                j = j + 1
        return 0
