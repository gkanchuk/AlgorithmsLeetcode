# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        
        
        if(not head or not head.next):
            return  False
        
        prev = -2
        curr = -1
        prevNode = head
        curNode = head.next
        
        while prev < curr and curNode.next:
            prev  =    self.getPosition(head,prevNode)
            curr  =    self.getPosition(head,curNode)
            prevNode = prevNode.next
            curNode =  curNode.next
        
        if(  not curNode.next):
            return False
        if( prev  >  curr  or prev == curr):
            return True
          
    def getPosition(self, head: ListNode , temp:  ListNode) -> int:
        
        count  = 0
        while(head is not  temp):
            count = count+1
            head =  head.next
            
        return count    
            
        
